Most Important Topics

**Question 1. What is MVVM and How its work internally?.
**Answer 1. Mvvm is a software architecture design pattern that are used to follow the cepration of concern where application is devide 
into the three parts UI Layer (Activity/Fragment), Domain Layer(ViewModel) and DataLayer (Repository) or we can as Model so that we can
create the software as a testable modulare and scalable.

[Ativity/Fragment]       [ViewModel]              [Repository]
[UILayer] ------------> [Domain Layer] --------> [Data Layer]--------> [Network/APIS]
                                                    |--------> [Local Database]       

UI Layer - This Layer is talk to the domain layer or viewmodel for about the so he want to fetch the data or want to send the data.And this
the top layer where user intreact with over applacition.

Data Layer - This layer is fetch the and provide to the domin layer and data can come from the network or localdatabase and also when 
offline and online type of conditions are written here.

Domain Layer - This layer work the as bridge between the UI layer and Data layer its take the from the data layer and provide the data 
for ui layer and its not save the refernce of the ui. it create obserabler for the ui when something changed with the data it is update 
the UI.


**Question 2. What is the singleton?.
**Answer 2. Singleton is a pattern where only object are present in entire application every request will only that object not 
create new object.We can create the object using companion object and also create a class singleton using object.


**Question 3. Whats is android component and what is the android arcitecture component and android jetpack?.

**Answer 3. Android components are activity, service, broadcast receiver and content provider these component are manage by the android.
Android architecture component are the architecture pattern that are used develop the software and they make our software sepration of 
concern and data driven application.
MVC
MVP
MVVM

Android jetpack is a set of libraries thats are provide povide the libraries for developer our application manageble.

**Question 4. What is the lifecycle aware component ?.
**Answer 4. Lifecylce aware component are the aware of the android component (activity/fragment).
Activity have lifecycle so we want write there code into another class instead of activity file so that sepration of concern follow
and minimum code can have into the activity.
Component - 
1. lifecycle owner - They component that have lifecycler,
2. lifecycle observer - Observe the lifecycle of the android component (activity/fragment).

When activity is creation phase that time first acitivity methods call after that observe class method call
and when activity destruction phase first observe class methods are call after that acitivity methods call.


**Quesion 5. What is the dependecy Injection?.
**Answer 5. Dependecy Injection is design pattern that are used to inject the dependecy into reuqire place.
Mean Suppose a class need a object after that it will be run first it will create object after that it will run without this it cannot run
We have two approach first is class can create that object own or second is system will provide when class create that object class not 
testable and single propeties not follow mean he is not doing his also create a object here we use the depdency injection so class will
work own system fill full there object requirements.

We can inject object using constructor or field inject.


**Question 6. What is the hilt ?.
**Answer 6. Hilt is dependecy injection library that are provided by the google for only android application developer.
It is working on the top dragger2 depenedency inject and its provide a structure for injection.
We are use the annotions for use the hilt dependency inject.
@HiltAndroidApp,@AndroidEntryPoint,@Inject,@Inject constructor,@Module,@Provides,@InstallIn,@Sington,@Binds,@Named 
@InstallIn -> Its define the level of object there we created manually.
@Module -> Its a collection of object were all manually objects are store
@Provides -> Its is used int the manually object object class for provide the object
@Singleton -> Its create a single object.
@Binds -> If any object is created with the construct injection and bind with the interface and return the object of that, That time use
binds anonations.
@Named -> It is used when have same type and have different implementation that time we are tagged for differnciate.


**Question 7. What is the Live data?.
**Answer 7. Live data is data holder obserevable and lifecycler aware class. It is update the ui component when data has been changed
and it will will updae ui only when that will be in active state.

We have the setValue and postValue Methods both methods are used to store the update but setValue is used into the main thread and 
postValue method is used into the background thread.


**Question 8. What is the databinding?.
**Answer 8. Data binding is library of the jetpack compose and it is used to the bind the ui component to the data source directly in the 
layout file.it can we one direction or two direction binding.

lateint var binding :ActivityMainBinding

binding = DataBindingUtils.setLayoutFile(context,layout_name)

Create varible into the layout file and pass the value of that variable into the activity file.



**Question 9. What is the repository pattern?.
**Answer 9. Its is a design pattern and it is a common pattern for other software in android it will the mediator between the domain
layer and the data layout. Simple means repository take the request from the domain layer and resolve that query and it can make network 
request or take data from the room database.

**Question 10. What is the android architecture pattern?.
**Answer 10. Architecture pattern simple that way for design the software in form of scable and manitainable.
We have different pattern.

MVC -> Mvc stand for model view controller here view is a layout file controller is an activity file and model is data layer file.
view is tightly coupled with the controller because of unit test not easy to perform in this architecture and its a default architecture
pattern we are used this into the small projects.

MVP -> Mvp stand for the model view present here view is the layout and activity file and create a seperate class for business logics and
fetch the data that extand the presenter class and presenter and view take talk to each other by the interfaces and data layer is same.

MVVM -> Mvvm stand for the model view view model here view are the activty and layout file and view model are used for the business logic
and model is a data layer that have repository and repository talk to the network or local database and view model have observable for the
data ui will get the data from the observables.

**Question 11. What is the Flows and Channels and what are the hot stream and cold streem?.
**Answer 11. Suppose server is sending continues data and we want to take data in perform work on that we use flows and channels
or we want to work the stream data that time we use the flow and channel.

Flows are the cold stream and channels are the hot stream.
Channels - Channels have the send and receiver and it will keep sending the data weather there is a receiver or not. And in this case if
some one is join in the between it will loose the starting data.
Flows - Flows have the emit and collect method it will sending the data when any reciever will present and i will send the data from the 
starting to the receiver.

Flow have the terminal and non-terminal operators means after the produce value we can receive that value into diferent way.

---Terminal operator---
first() -> It will collect the only firt value
collect() -> It will collect the value one by one
toList() -> It will collect first all value then give the list

---Non Terminal Operater---

map() -> It will take the value and perform some action and produce the value.
filter() -> We can put the filter on the value
But one more thing is after the non terminal operator will need to use the terminal operator for collect the value.

*Note : Buffer -> Suppose sender will send the value fast but collect is taking time to collect the value on that time use the buffer
and buffer will take the size of the capicity means how much the value you want to buffer.

Flow sender is used the same thread that is collecter is used mean flow is preserve the coroutine context. So want to change the coroutine
context because sender or fetch the stream data from the network that time we are use the backround thread and collect that data into 
main thread so we are used "flowOn" method for change the coroutine context.

Flow have the own catch block in the sending side no need to use the try catch use only catch block with the flow it will catch there 
error.

**Question 12. What is the Shared Flow?.
**Answer 12. Shared flow is a hot flow if any one receiver present it will send the data and if some one receiver join that he will
receive the data from the current position not the starting and in shared flow have one more option is reply for suppose provide the 
some previous data to new receiver it will provide.

**Question 13. What is the State Flow?.
**Answer 13. State Flow is same as the shared flow but differece is that state flow save the last updated value and have default value.

**Question 14. What is the diffence between LiveData and StateFlow ?.
**Answer 14. 
Transformation (Map, filter etc.) Of Data->
1. In the Live data all tranformation will work on the main thread but in state flow we can switch there coroutine context.
2. Transaformation are the limited in the live data but in state flow have lots of methods.
3. Live data require a life cycle for the work it will not work without the life cycle and state flow need only coroutine context.
